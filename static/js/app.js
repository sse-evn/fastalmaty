// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let ordersChart = null;
let apiKeys = [];

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
function showPage(pageId) {
    document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
    const page = document.getElementById(pageId);
    if (!page) {
        loadPage(pageId);
        return;
    }
    page.classList.add('active');
    onPageLoad(pageId);
}

function onPageLoad(pageId) {
    switch (pageId) {
        case 'dashboard': updateStats(); break;
        case 'orders': loadAllOrders(); break;
        case 'courier': loadCourierOrders(); break;
        case 'settings': loadSettings(); break;
        case 'admin': loadAdminPanel(); break;
        case 'analytics': initChart(); break;
        case 'new-order': initNewOrderForm(); break;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ AJAX
async function loadPage(pageId) {
    try {
        const res = await fetch(`/templates/${pageId}.html`);
        if (!res.ok) throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        const container = document.querySelector('.main-content');
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = await res.text();
        container.appendChild(tempDiv.firstChild);
        onPageLoad(pageId);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', err);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ' + err.message, 'error');
    }
}

// --- –î–∞—à–±–æ—Ä–¥ ---
async function updateStats() {
    try {
        const res = await fetch('/api/stats', { credentials: 'include' });
        if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
        const stats = await res.json();
        document.getElementById('total-orders').textContent = stats.total || 0;
        document.getElementById('new-orders').textContent = stats.new || 0;
        document.getElementById('progress-orders').textContent = stats.progress || 0;
        document.getElementById('completed-orders').textContent = stats.completed || 0;
        loadRecentOrders();
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + err.message, 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
async function loadRecentOrders() {
    try {
        const res = await fetch('/api/orders?limit=5', { credentials: 'include' });
        if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
        const orders = await res.json();

        if (!Array.isArray(orders)) {
            console.error("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:", orders);
            showNotification("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", "error");
            return;
        }

        const tbody = document.getElementById('recent-orders');
        if (!tbody) return;

        if (orders.length === 0) {
            tbody.innerHTML = '<tr><td colspan="5" class="text-center">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</td></tr>';
            return;
        }

        tbody.innerHTML = orders.map(o => `
            <tr>
                <td>#${o.id || ''}</td>
                <td>${o.receiver_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>${o.receiver_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td><span class="status-badge status-${o.status || 'new'}">${getStatusText(o.status)}</span></td>
                <td>${o.delivery_cost_tenge || 0} ‚Ç∏</td>
            </tr>
        `).join('');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤:', err);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤: ' + err.message, 'error');
    }
}

// --- –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (—É–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞) ---
function initNewOrderForm() {
    const phoneInput = document.getElementById('receiver-phone');
    if (!phoneInput) return;

    phoneInput.addEventListener('blur', async function() {
        const phone = this.value.trim();
        if (phone.length >= 10) {
            try {
                const res = await fetch(`/api/clients/search?phone=${encodeURIComponent(phone)}`, { credentials: 'include' });
                if (!res.ok) return;
                const clients = await res.json();
                if (Array.isArray(clients) && clients.length > 0) {
                    const c = clients[0];
                    document.getElementById('receiver-name').value = c.name || '';
                    document.getElementById('receiver-address').value = c.address || '';
                    showNotification('–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', 'success');
                }
            } catch (err) {
                console.warn('–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', err);
            }
        }
    });
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
function resetForm() {
    document.getElementById('fast-order-form').reset();
    showNotification('–§–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω–∞', 'info');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
async function submitFastOrder() {
    const orderData = {
        sender_name: document.getElementById('sender-name').value,
        sender_phone: document.getElementById('sender-phone').value,
        sender_address: document.getElementById('sender-address').value,
        receiver_name: document.getElementById('receiver-name').value,
        receiver_phone: document.getElementById('receiver-phone').value,
        receiver_address: document.getElementById('receiver-address').value,
        description: document.getElementById('product-desc').value,
        weight_kg: parseFloat(document.getElementById('weight').value) || 0,
        volume_l: parseFloat(document.getElementById('volume').value) || 0,
        delivery_cost_tenge: parseFloat(document.getElementById('delivery-cost').value) || 0,
        payment_method: document.getElementById('payment-method').value
    };

    try {
        const res = await fetch('/api/orders', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(orderData),
            credentials: 'include'
        });

        const result = await res.json();

        if (!res.ok) {
            showNotification('–û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
            return;
        }

        showNotification('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', 'success');
        resetForm();
        showPage('dashboard');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', err);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + err.message, 'error');
    }
}

// --- –ó–∞–∫–∞–∑—ã ---
async function loadAllOrders() {
    try {
        const res = await fetch('/api/orders', { credentials: 'include' });
        if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
        const orders = await res.json();

        if (!Array.isArray(orders)) {
            console.error("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:", orders);
            showNotification("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", "error");
            return;
        }

        const tbody = document.getElementById('all-orders');
        if (!tbody) return;

        if (orders.length === 0) {
            tbody.innerHTML = '<tr><td colspan="6" class="text-center">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</td></tr>';
            return;
        }

        tbody.innerHTML = orders.map(o => `
            <tr>
                <td class="order-id">#${o.id || ''}</td>
                <td>${o.receiver_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>${o.receiver_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td><span class="status-badge status-${o.status || 'new'}">${getStatusText(o.status)}</span></td>
                <td>${formatDate(o.created_at)}</td>
                <td>
                    <button class="btn btn-warning btn-sm" onclick="generateWaybill('${o.id}')">üñ®Ô∏è PDF</button>
                </td>
            </tr>
        `).join('');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', err);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: ' + err.message, 'error');
    }
}

// –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤
async function searchOrders() {
    const searchTerm = document.getElementById('search-input').value.trim();
    try {
        const res = await fetch(`/api/orders?search=${encodeURIComponent(searchTerm)}`, { credentials: 'include' });
        if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
        const orders = await res.json();

        if (!Array.isArray(orders)) {
            console.error("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:", orders);
            showNotification("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", "error");
            return;
        }

        const tbody = document.getElementById('all-orders');
        if (!tbody) return;

        if (orders.length === 0) {
            tbody.innerHTML = '<tr><td colspan="6" class="text-center">–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
            return;
        }

        tbody.innerHTML = orders.map(o => `
            <tr>
                <td class="order-id">#${o.id || ''}</td>
                <td>${o.receiver_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>${o.receiver_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td><span class="status-badge status-${o.status || 'new'}">${getStatusText(o.status)}</span></td>
                <td>${formatDate(o.created_at)}</td>
                <td>
                    <button class="btn btn-warning btn-sm" onclick="generateWaybill('${o.id}')">üñ®Ô∏è PDF</button>
                </td>
            </tr>
        `).join('');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', err);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤: ' + err.message, 'error');
    }
}

// --- –ö—É—Ä—å–µ—Ä ---
async function loadCourierOrders() {
    try {
        const res = await fetch('/api/courier/orders', { credentials: 'include' });
        if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);

        const orders = await res.json();

        if (!Array.isArray(orders)) {
            console.error("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:", orders);
            showNotification("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", "error");
            return;
        }

        const tbody = document.getElementById('courier-orders');
        if (!tbody) return;

        if (orders.length === 0) {
            tbody.innerHTML = '<tr><td colspan="5" class="text-center">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –ø—É—Ç–∏</td></tr>';
            return;
        }

        tbody.innerHTML = orders.map(o => `
            <tr>
                <td class="order-id">#${o.id || ''}</td>
                <td>${o.receiver_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>${o.receiver_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td><span class="status-badge status-${o.status || 'new'}">${getStatusText(o.status)}</span></td>
                <td>
                    <button class="btn btn-success btn-sm" onclick="confirmOrder('${o.id}')">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
                </td>
            </tr>
        `).join('');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞:', err);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä–∞: ' + err.message, 'error');
    }
}

// --- CRM ---
async function searchClient() {
    const phone = document.getElementById('client-search').value.trim();
    if (phone.length < 3) {
        document.getElementById('clients-list').innerHTML = '<tr><td colspan="4" class="text-center">–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞</td></tr>';
        return;
    }

    try {
        const res = await fetch(`/api/clients/search?phone=${encodeURIComponent(phone)}`, { credentials: 'include' });
        if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
        const clients = await res.json();

        if (!Array.isArray(clients)) {
            console.error("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:", clients);
            showNotification("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞", "error");
            return;
        }

        const tbody = document.getElementById('clients-list');
        if (!tbody) return;

        if (clients.length === 0) {
            tbody.innerHTML = '<tr><td colspan="4" class="text-center">–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
            return;
        }

        tbody.innerHTML = clients.map(c => `
            <tr>
                <td>${c.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>${c.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>${c.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>${c.total_orders || 0}</td>
            </tr>
        `).join('');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:', err);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: ' + err.message, 'error');
    }
}

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
async function loadSettings() {
    try {
        const res = await fetch('/api/settings', { credentials: 'include' });
        if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
        const settings = await res.json();

        document.getElementById('setting-company_name').value = settings.company_name || '';
        document.getElementById('setting-delivery_price').value = settings.delivery_price || 500;
        document.getElementById('setting-api_key').value = settings.api_key || '';
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + err.message, 'error');
    }
}

async function saveSettings() {
    const settings = {
        company_name: document.getElementById('setting-company_name').value,
        delivery_price: parseFloat(document.getElementById('setting-delivery_price').value) || 500
    };

    try {
        const res = await fetch('/api/settings', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(settings),
            credentials: 'include'
        });

        const result = await res.json();

        if (!res.ok) {
            showNotification('–û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
            return;
        }

        showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + err.message, 'error');
    }
}

// --- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ---
function initChart() {
    const ctx = document.getElementById('ordersChart');
    if (!ctx) return;

    if (ordersChart) {
        ordersChart.destroy();
    }

    ordersChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
            datasets: [{
                label: '–ó–∞–∫–∞–∑—ã',
                data: [0, 0, 0, 0, 0, 0, 0],
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 2,
                tension: 0.3
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    loadChartData();
}

async function loadChartData() {
    try {
        const res = await fetch('/api/analytics/orders-by-day', { credentials: 'include' });
        if (!res.ok) return;
        const data = await res.json();

        if (ordersChart && Array.isArray(data.labels) && Array.isArray(data.values)) {
            ordersChart.data.labels = data.labels;
            ordersChart.data.datasets[0].data = data.values;
            ordersChart.update();
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:', err);
    }
}

// --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
async function loadAdminPanel() {
    await loadAdminUsers();
    await loadAdminApiKeys();
}

async function loadAdminUsers() {
    try {
        const res = await fetch('/api/admin/users', { credentials: 'include' });
        if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
        const data = await res.json();
        const users = Array.isArray(data.users) ? data.users : [];
        const tbody = document.querySelector('#admin-users tbody');
        if (!tbody) return;

        document.getElementById('admin-user-count').textContent = users.length;

        if (users.length === 0) {
            tbody.innerHTML = '<tr><td colspan="4" class="text-center">–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</td></tr>';
            return;
        }

        tbody.innerHTML = users.map(u => `
            <tr>
                <td>${u.username || '‚Äî'}</td>
                <td>${u.name || '‚Äî'}</td>
                <td>${getRoleBadge(u.role)}</td>
                <td>
                    <button class="btn btn-danger btn-sm" onclick="deleteUser(${u.id}, '${u.username}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </td>
            </tr>
        `).join('');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + err.message, 'error');
    }
}

async function loadAdminApiKeys() {
    try {
        const res = await fetch('/api/admin/api-keys', { credentials: 'include' });
        if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
        const data = await res.json();
        const keys = Array.isArray(data.api_keys) ? data.api_keys : [];
        apiKeys = keys;
        const tbody = document.querySelector('#admin-api-keys tbody');
        if (!tbody) return;

        document.getElementById('admin-api-key-count').textContent = keys.length;

        if (keys.length === 0) {
            tbody.innerHTML = '<tr><td colspan="3" class="text-center">–ù–µ—Ç API-–∫–ª—é—á–µ–π</td></tr>';
            return;
        }

        tbody.innerHTML = keys.map(k => `
            <tr>
                <td>
                    <code>${k.key ? k.key.substring(0, 8) + '...' + k.key.substring(k.key.length - 8) : '‚Äî'}</code>
                    <button class="btn btn-sm btn-link" onclick="copyApiKey('${k.key}')">
                        <i class="fas fa-copy"></i>
                    </button>
                </td>
                <td>${formatDate(k.created_at)}</td>
                <td>
                    <button class="btn btn-danger btn-sm" onclick="revokeApiKey(${k.id})">
                        ‚ùå –û—Ç–æ–∑–≤–∞—Ç—å
                    </button>
                </td>
            </tr>
        `).join('');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API-–∫–ª—é—á–µ–π:', err);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API-–∫–ª—é—á–µ–π: ' + err.message, 'error');
    }
}

// --- API –ö–ª—é—á–∏ ---
function generateApiKey() {
    fetch('/api/admin/generate-api-key', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include'
    })
    .then(res => res.json())
    .then(data => {
        if (data.error) {
            showNotification('–û—à–∏–±–∫–∞: ' + data.error, 'error');
            return;
        }
        showNotification(`–ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${data.key}`, 'success');
        loadAdminApiKeys();
    })
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞:', err);
        showNotification('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: ' + err.message, 'error');
    });
}

function copyApiKey(key) {
    navigator.clipboard.writeText(key)
        .then(() => {
            showNotification('API-–∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
        })
        .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            showNotification('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞', 'error');
        });
}

function revokeApiKey(keyId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —ç—Ç–æ—Ç API-–∫–ª—é—á?')) {
        return;
    }

    fetch(`/api/admin/revoke-api-key?id=${keyId}`, {
        method: 'POST',
        credentials: 'include'
    })
    .then(res => res.json())
    .then(data => {
        if (data.error) {
            showNotification('–û—à–∏–±–∫–∞: ' + data.error, 'error');
            return;
        }
        showNotification('API-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω', 'success');
        loadAdminApiKeys();
    })
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –∫–ª—é—á–∞:', err);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –∫–ª—é—á–∞: ' + err.message, 'error');
    });
}

// --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
function openAddUserModal() {
    document.getElementById('addUserModal').style.display = 'flex';
}

function closeAddUserModal() {
    document.getElementById('addUserModal').style.display = 'none';
    document.getElementById('addUserForm').reset();
}

document.addEventListener('DOMContentLoaded', function() {
    const addUserForm = document.getElementById('addUserForm');
    if (addUserForm) {
        addUserForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const data = Object.fromEntries(formData);

            try {
                const res = await fetch('/api/admin/users', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data),
                    credentials: 'include'
                });

                const result = await res.json();

                if (!res.ok) {
                    showNotification('–û—à–∏–±–∫–∞: ' + (result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
                    return;
                }

                showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', 'success');
                closeAddUserModal();
                loadAdminUsers();
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + err.message, 'error');
            }
        });
    }
});

// --- –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function generateWaybill(orderID) {
    window.open(`/api/waybill/${orderID}`, '_blank');
}

function confirmOrder(id) {
    fetch(`/api/order/${id}/confirm`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'accept' }),
        credentials: 'include'
    })
    .then(res => res.json())
    .then(data => {
        if (data.error) {
            showNotification('–û—à–∏–±–∫–∞: ' + data.error, 'error');
            return;
        }
        showNotification('–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', 'success');
        loadCourierOrders();
    })
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', err);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + err.message, 'error');
    });
}

function deleteUser(userId, username) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${username}"?`)) {
        return;
    }

    fetch(`/api/admin/users/${userId}`, {
        method: 'DELETE',
        credentials: 'include'
    })
    .then(res => res.json())
    .then(data => {
        if (data.error) {
            showNotification('–û—à–∏–±–∫–∞: ' + data.error, 'error');
            return;
        }
        showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω', 'success');
        loadAdminUsers();
    })
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + err.message, 'error');
    });
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function getRoleBadge(role) {
    const badges = {
        'admin': '<span class="badge badge-danger">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>',
        'manager': '<span class="badge badge-warning">–ú–µ–Ω–µ–¥–∂–µ—Ä</span>',
        'courier': '<span class="badge badge-info">–ö—É—Ä—å–µ—Ä</span>'
    };
    return badges[role] || `<span class="badge">${role}</span>`;
}

function getStatusText(status) {
    const statuses = {
        'new': '–ù–æ–≤—ã–π',
        'progress': '–í –ø—É—Ç–∏',
        'completed': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    return statuses[status] || status;
}

function formatDate(dateString) {
    if (!dateString) return '‚Äî';
    const date = new Date(dateString);
    return isNaN(date.getTime()) ? '‚Äî' : date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
}

function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;

    notification.style.position = 'fixed';
    notification.style.bottom = '20px';
    notification.style.right = '20px';
    notification.style.padding = '15px 20px';
    notification.style.borderRadius = '4px';
    notification.style.color = 'white';
    notification.style.zIndex = '9999';
    notification.style.maxWidth = '300px';
    notification.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';

    if (type === 'success') {
        notification.style.backgroundColor = '#4CAF50';
    } else if (type === 'error') {
        notification.style.backgroundColor = '#F44336';
    } else {
        notification.style.backgroundColor = '#2196F3';
    }

    document.body.appendChild(notification);

    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transition = 'opacity 0.5s ease';
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 500);
    }, 5000);
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('[data-page]').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const target = e.target.closest('[data-page]');
            if (!target) return;
            const page = target.dataset.page;
            document.querySelectorAll('.nav-link').forEach(el => el.classList.remove('active'));
            target.classList.add('active');
            showPage(page);
        });
    });

    showPage('dashboard');
});